Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії










ЗВІТ
до лабораторної роботи з дисципліни
"Аналіз та рефакторинг коду"
на тему: "РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)"


















Виконав ст. гр. ПЗПІ-22-1
Головін Святослав Юрійович


Перевірив
Сокорчук Ігор Петрович


























Харків 2024 р.
1 МЕТА


Спроєктувати базу даних для серверної частини додатка. Розробити прикладний програмний інтерфейс для роботи з базою даних


2 ХІД РОБОТИ


1. Розробка будови програмної системи
1.1. Архітектурний огляд системи
Система складається з трьох основних компонентів:
* Серверна частина:
   * API-сервер;
   * База даних;
   * Модулі обробки даних та сповіщень.
* IoT-клієнт:
   * Сенсори температури та вологості;
   * Модуль передачі даних;
* Клієнтська частина:
   * Веб-клієнт;
   * Мобільний клієнт iOS.


1.2. Деталізація компонентів системи
* Серверна частина:
   * API-сервер
      * Функціональність:
         * Прийом та обробка запитів від веб та мобільних клієнтів;
         * Взаємодія з базою даних для збереження та отримання інформації;
         * Прийом даних від IoT-клієнтів;
         * Обробка логіки бізнес-процесів (керування запасами, сповіщення, генерація звітів);
      * Технології:
         * Мова програмування: Node.js(Express);
         * API-протокол: RESTful API;
         * Безпека: JWT для автентифікації та авторизації;
   * База даних:
      * Функціональність:
         * Зберігання даних про вакцини, партії, терміни придатності, користувачів, замовлення, показники температури та вологості;
      * Технології:
         * Реляційна БД PostgreSQL;
   * Модуль обробки даних та сповіщень:
      * Функціональність:
         * Аналіз отриманих даних від IoT-сенсорів;
         * Виявлення відхилень від встановлених норм;
         * Генерація та відправка автоматичних пуш-сповіщеннь;
      * Технології:
         * Мова програмування: Node.js(Express);
* IoT-клієнт:
   * Сенсори:
      * Функціональність:
         * Вимірювання температури та вологості в реальному часі;
      * Технології:
         * Обладнання: Сенсори DHT22, DS18B20 або аналогічні з високою точністю;
         * Мікроконтролери: Arduino;
   * Модуль передачі даних:
      * Функціональність:
         * Передача зібраних даних на сервер;
         * Забезпечення стабільного з'єднання з мережею;
      * Технології:
         * Протоколи зв'язку: HTTP;
         * Мережеві інтерфейси: Ethernet;
* Клієнтська частина:
   * Веб-клієнт:
      * Функціональність:
         * Керування запасами вакцин;
         * Моніторинг умов зберігання;
         * Формування та відстеження замовлень;
         * Генерація звітів та аналітика;
         * Керування користувачами та правами доступу;
   * Технології:
      * Фронтенд фреймворки: React.js;
      * UI бібліотеки: Material-UI;
* Мобільний клієнт
   * Функціональність:
      * Перегляд інформації в режимі реального часу;
      * Отримання пуш-сповіщень;
   * Технології:
      * Мова розробки: Swift;
      * Пуш-сповіщення: Apple Push Notification Service;


1.3. Інтеграція компонентів
* Взаємодія IoT-клієнта з сервером:
   * Протокол обміну даними: HTTP;
   * Безпека: автентифікація пристроїв на основі сертифікатів або токенів;
* Взаємодія клієнтської частини з сервером:
   * API-запити: RESTful запити з використанням HTTP методів (GET, POST, PUT, DELETE);
   * Формат даних: JSON для легкого парсингу та взаємодії між клієнтом та сервером.
   * Автентифікація та авторизація: Використання токенів доступу (JWT), управління сесіями.


1.4. Безпека та відповідність стандартам
Ролі та права користувачів(адміністратор, медичний персонал).


1.5. Схема архітектури системи


[Мобільний Клієнт]  <-->   (REST API)  <-->  [Веб Клієнт]
                                   |
[IoT Сенсори] --(HTTPS)--> [API-Сервер] <--(SQL)--> [База Даних]
                                   |
[Мобільний Клієнт]  <--    [Модуль Сповіщень]


2. Створення UML діаграми прецедентів для серверної частини системи.
        На основі будови програмної системи розробимо UML діаграму прецедентів, представлену на рисунку 2.1.


  

Рисунок 2.1 - UML діаграма прецедентів для серверної частини системи


3. Створення ER діаграми даних


  

Рисунок 3.1 - ER діаграма даних
        На основі будови програмної системи розробимо ER діаграму даних, представлену на рисунку 3.1.


4. Розробка бази даних програмної системи
        Базу даних буде розроблено з використанням технології Postgress, вона буде відображати ER діаграму та функціональні вимоги.
        Результатом розробки є SQL-скрипт для створення бази даних для повної системи, представлений у додатку А.


5. Створення діаграми структури БД
        На основі розробленої бази даних створимо діаграму її структури, представлену на рисунку 5.1.


  

Рисунок 5.1 - Діаграма структури бази даних


6. Розробка функцій роботи з БД (ORM або CoRM тощо)
        Для зручнішої роботи та інтеграції з базою даних, було обрано ORM Sequelize, що дозволяє ефективно встановлювати звʼязок між PostgreSQL базою даних і Node.js(Express) сервером.
        Опишемо моделі системи в форматі Sequelize, як приклад моделі є Inventory:


'use strict';


const { Sequelize } = require('sequelize');
const { sequelize } = require('../services/db');
const { Location } = require('./Location');


const Inventory = sequelize.define(
  'inventory',
  {
    inventory_id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true,
    },
    location_id: {
      type: Sequelize.INTEGER,
      references: {
        model: Location,
        key: 'location_id',
      },
    },
    max_quantity: Sequelize.INTEGER,
  },
  {
    tableName: 'inventory',
    timestamps: false,
  },
);


Inventory.belongsTo(Location, { foreignKey: 'location_id' });
Location.hasMany(Inventory, { foreignKey: 'location_id' });


module.exports = {
  Inventory,
};


7. Розробка API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами
        Використовуючи технології Node.js, фреймворк Express.js та підготовані моделі в форматі Sequalize, розробимо типові CRUD шляхи для взаємодії з базою даних через клієнта. Так для кожної моделі будуть типові 5 шляхів: Створити, Змінити, Отримати всі, Отримати один, Видалити. Приклад таких шляхів для моделі Vaccine:


'use strict';


const { Vaccine } = require('../models/Vaccine');
const express = require('express');


const router = express.Router();


const getAll = async (req, res) => {
  try {
    const vaccines = await Vaccine.findAll();
    res.send(vaccines);
  } catch (err) {
    res.status(400).send(err.message);
  }
};


const getOne = async (req, res) => {
  const { id } = req.params;


  try {
    const vaccine = await Vaccine.findByPk(parseInt(id));
    if (!vaccine) {
      return res.status(404).send('Vaccine not found');
    }
    res.send(vaccine);
  } catch (err) {
    res.status(400).send(err.message);
  }
};


const add = async (req, res) => {
  const vaccineData = { ...req.body };


  try {
    const vaccine = await Vaccine.create(vaccineData);
    res.status(201).send(vaccine);
  } catch (err) {
    res.status(400).send(err.message);
  }
};


const update = async (req, res) => {
  const { id } = req.params;
  const vaccineData = { ...req.body };


  try {
    await Vaccine.update(vaccineData, {
      where: { vaccine_id: parseInt(id) },
    });
    const vaccine = await Vaccine.findByPk(parseInt(id));
    if (!vaccine) {
      return res.status(404).send('Vaccine not found');
    }
    res.send(vaccine);
  } catch (err) {
    res.status(400).send(err.message);
  }
};


const remove = async (req, res) => {
  const { id } = req.params;


  try {
    const deleted = await Vaccine.destroy({
      where: { vaccine_id: parseInt(id) },
    });
    if (!deleted) {
      return res.status(404).send('Vaccine not found');
    }
    res.status(204).send({});
  } catch (err) {
    res.status(400).send(err.message);
  }
};


router.get('/', getAll);
router.get('/:id', getOne);
router.post('/', add);
router.patch('/:id', update);
router.delete('/:id', remove);


module.exports = { router };


8. Створення специфікації розробленого API
        Для легкої інтеграції розробимо специфікацію у форматі OpenAPI. Отримана специфікація наведена у додатку Б.


9. Тестування системи
        Записуємо змістовне відео з тестуванням взаємодії серверної частини та бази даних і серверної частини й клієнта, проставляємо таймкоди та завантажуємо на сервіс YouTube. Посилання на відео: https://youtu.be/Y0EeEwBaUfs.


ВИСНОВКИ


        У ході виконання роботи було спроєктовано базу даних для серверної частини додатка. Розроблено прикладний програмний інтерфейс для роботи з базою даних.


________________


ДОДАТОК А
SQL-СКРИПТ ДЛЯ СТВОРЕННЯ БАЗИ ДАНИХ


-- Таблиця VACCINE
CREATE TABLE VACCINE (
    vaccine_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    min_temperature INTEGER NOT NULL,
    max_temperature INTEGER NOT NULL,
    min_humidity INTEGER NOT NULL,
    max_humidity INTEGER NOT NULL,
    CHECK (min_temperature <= max_temperature),
    CHECK (min_humidity <= max_humidity)
);


-- Таблиця LOCATION
CREATE TABLE LOCATION (
    location_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255)
);


-- Таблиця INVENTORY
CREATE TABLE INVENTORY (
    inventory_id SERIAL PRIMARY KEY,
    location_id INTEGER NOT NULL REFERENCES LOCATION(location_id),
    max_quantity INTEGER NOT NULL
);


-- Таблиця INVENTORY_ITEM
CREATE TABLE INVENTORY_ITEM (
    inventory_item_id SERIAL PRIMARY KEY,
    inventory_id INTEGER NOT NULL REFERENCES INVENTORY(inventory_id) ON DELETE CASCADE,
    vaccine_id INTEGER NOT NULL REFERENCES VACCINE(vaccine_id),
    quantity INTEGER NOT NULL CHECK (quantity >= 0),
    UNIQUE (inventory_id, vaccine_id)
);


-- Таблиця SENSOR_DATA
CREATE TABLE SENSOR_DATA (
    sensor_data_id SERIAL PRIMARY KEY,
    location_id INTEGER NOT NULL REFERENCES LOCATION(location_id),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    temperature REAL NOT NULL,
    humidity REAL NOT NULL
);


-- Таблиця "USER"
CREATE TABLE "USER" (
    username VARCHAR(50) PRIMARY KEY,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('admin', 'medical_staff'))
);


-- Таблиця "ORDER"
CREATE TABLE "ORDER" (
    order_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL REFERENCES "USER"(username),
    order_date TIMESTAMP NOT NULL DEFAULT NOW()
    order_status VARCHAR(50) NOT NULL DEFAULT 'new'
);


-- Таблиця ORDER_ITEM
CREATE TABLE ORDER_ITEM (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER NOT NULL REFERENCES "ORDER"(order_id) ON DELETE CASCADE,
    vaccine_id INTEGER NOT NULL REFERENCES VACCINE(vaccine_id),
    quantity INTEGER NOT NULL CHECK (quantity > 0)
);


-- Таблиця NOTIFICATION
CREATE TABLE NOTIFICATION (
    notification_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL REFERENCES "USER"(username),
    sent_at TIMESTAMP NOT NULL DEFAULT NOW(),
    message TEXT NOT NULL,
    notification_type VARCHAR(50) NOT NULL
);
________________
ДОДАТОК Б
OPENAPI СПЕЦИФІКАЦІЯ СЕРВЕРНОЇ ЧАСТИНИ


openapi: 3.0.0
info:
  title: Програмна система для контролю зберігання вакцини
  version: 1.0.0


servers:
  - url: http://localhost:3000/


paths:
  /inventories:
    get:
      summary: Отримати всі записи інвентарю
      responses:
        '200':
          description: Список записів інвентарю
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
    post:
      summary: Додати новий запис інвентарю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: Створений запис інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /inventories/{id}:
    get:
      summary: Отримати запис інвентарю за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Запис інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '404':
          description: Inventory not found
    patch:
      summary: Оновити запис інвентарю
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Оновлений запис інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
    delete:
      summary: Видалити запис інвентарю за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Запис інвентарю видалено


  /inventoryItems:
    get:
      summary: Отримати всі елементи інвентарю
      responses:
        '200':
          description: Список елементів інвентарю
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
    post:
      summary: Додати новий елемент інвентарю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '201':
          description: Створений елемент інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
  /inventoryItems/{id}:
    get:
      summary: Отримати елемент інвентарю за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Елемент інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Inventory Item not found
    patch:
      summary: Оновити елемент інвентарю
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '200':
          description: Оновлений елемент інвентарю
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
    delete:
      summary: Видалити елемент інвентарю за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Елемент інвентарю видалено


  /locations:
    get:
      summary: Отримати всі локації
      responses:
        '200':
          description: Список локацій
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      summary: Додати нову локацію
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '201':
          description: Створена локація
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /locations/{id}:
    get:
      summary: Отримати локацію за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Локація
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Location not found
    patch:
      summary: Оновити локацію
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Оновлена локація
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      summary: Видалити локацію за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Локація видалена


  /notifications:
    get:
      summary: Отримати всі сповіщення
      responses:
        '200':
          description: Список сповіщень
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
    post:
      summary: Додати нове сповіщення
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Створене сповіщення
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notifications/{id}:
    get:
      summary: Отримати сповіщення за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Сповіщення
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found
  /vaccines:
    get:
      summary: Отримати всі вакцини
      responses:
        '200':
          description: Список вакцин
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vaccine'
    post:
      summary: Додати нову вакцину
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccine'
      responses:
        '201':
          description: Створена вакцина
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'
  /vaccines/{id}:
    get:
      summary: Отримати вакцину за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Вакцина
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'
        '404':
          description: Vaccine not found
    patch:
      summary: Оновити вакцину
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccine'
      responses:
        '200':
          description: Оновлена вакцина
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccine'
    delete:
      summary: Видалити вакцину за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Вакцина видалена


  /orders:
    get:
      summary: Отримати всі замовлення
      responses:
        '200':
          description: Список замовлень
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Додати нове замовлення
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                order_status:
                  type: string
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
      responses:
        '201':
          description: Створене замовлення
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}:
    get:
      summary: Отримати замовлення за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Замовлення
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    patch:
      summary: Оновити замовлення
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                order_status:
                  type: string
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
      responses:
        '200':
          description: Оновлене замовлення
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      summary: Видалити замовлення за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Замовлення видалено


  /sensorData:
    get:
      summary: Отримати всі дані сенсорів
      responses:
        '200':
          description: Список даних сенсорів
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorData'
    post:
      summary: Додати нові дані сенсорів
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorData'
      responses:
        '201':
          description: Створені дані сенсорів
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
  /sensorData/{id}:
    get:
      summary: Отримати дані сенсора за ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Дані сенсора
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
        '404':
          description: Sensor Data not found


  /users:
    get:
      summary: Отримати всіх користувачів
      responses:
        '200':
          description: Список користувачів
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Додати нового користувача
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Створений користувач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{username}:
    get:
      summary: Отримати користувача за ім'ям
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Користувач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Оновити користувача
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Оновлений користувач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Видалити користувача за ім'ям
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Користувача видалено


components:
  schemas:
    Inventory:
      type: object
      properties:
        inventory_id:
          type: integer
        location_id:
          type: integer
        max_quantity:
          type: integer
      required:
        - location_id
        - max_quantity
    InventoryItem:
      type: object
      properties:
        inventory_item_id:
          type: integer
        inventory_id:
          type: integer
        vaccine_id:
          type: integer
        quantity:
          type: integer
      required:
        - inventory_id
        - vaccine_id
        - quantity
    Location:
      type: object
      properties:
        location_id:
          type: integer
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address
    Notification:
      type: object
      properties:
        notification_id:
          type: integer
        username:
          type: string
        sent_at:
          type: string
          format: date-time
        message:
          type: string
        notification_type:
          type: string
      required:
        - username
        - message
        - notification_type
    Order:
      type: object
      properties:
        order_id:
          type: integer
        username:
          type: string
        order_date:
          type: string
          format: date-time
        order_status:
          type: string
      required:
        - username
    OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
        order_id:
          type: integer
        vaccine_id:
          type: integer
        quantity:
          type: integer
      required:
        - order_id
        - vaccine_id
        - quantity
    SensorData:
      type: object
      properties:
        sensor_data_id:
          type: integer
        location_id:
          type: integer
        updated_at:
          type: string
          format: date-time
        temperature:
          type: number
          format: float
        humidity:
          type: number
          format: float
    User:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
      required:
        - username
        - role
    Vaccine:
      type: object
      properties:
        vaccine_id:
          type: integer
        name:
          type: string
        description:
          type: string
        min_temperature:
          type: integer
        max_temperature:
          type: integer
        min_humidity:
          type: integer
        max_humidity:
          type: integer
      required:
        - name